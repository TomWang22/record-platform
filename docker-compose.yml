services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "ruok,stat,srvr,mntr"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","exec 3<>/dev/tcp/127.0.0.1/2181; echo srvr >&3; timeout 2 cat <&3 | grep -qi 'Mode:'"]
      interval: 5s
      timeout: 3s
      retries: 25
      start_period: 20s

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      zookeeper: { condition: service_healthy }
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports: ["29092:29092"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","kafka-broker-api-versions --bootstrap-server localhost:9092 >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 40s

  redis:
    image: redis:7-alpine
    command: ["redis-server","--save","","--appendonly","no"]
    ports: ["6379:6379"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD","redis-cli","ping"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 5s

  postgres:
    image: postgres:16-alpine
    environment: { POSTGRES_PASSWORD: postgres }
    restart: unless-stopped
    ports: ["5432:5432"]
    volumes: ["pgdata:/var/lib/postgresql/data"]
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s

  postgres-backup:
    image: prodrigestivill/postgres-backup-local:15
    depends_on:
      postgres: { condition: service_healthy }
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: records
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      SCHEDULE: "0 3 * * *"
      BACKUP_KEEP_DAYS: "7"
      BACKUP_KEEP_WEEKS: "4"
      BACKUP_KEEP_MONTHS: "6"
      COMPRESS: "gzip"
    volumes:
      - ./backups:/backups
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.55.0
    volumes:
      - ./infra/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./infra/alerts.yml:/etc/prometheus/alerts.yml:ro
    command: ["--config.file=/etc/prometheus/prometheus.yml"]
    restart: unless-stopped
    ports: ["9091:9090"]
    healthcheck:
      test: ["CMD-SHELL","wget -qO- http://localhost:9090/-/ready >/dev/null"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 15s

  grafana:
    image: grafana/grafana:11.1.0
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: Admin123!
      GF_AUTH_ANONYMOUS_ENABLED: "false"
    ports: ["3000:3000"]
    depends_on:
      prometheus: { condition: service_healthy }
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","curl -fsS http://127.0.0.1:3000/api/health >/dev/null"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 30s
    volumes:
      - ./infra/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./infra/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infra/grafana/dashboards:/var/lib/grafana/dashboards:ro

  auth-service:
    build: { context: ., dockerfile: services/auth-service/Dockerfile }
    env_file: [.env]
    depends_on:
      postgres: { condition: service_healthy }
      kafka: { condition: service_healthy }
      redis: { condition: service_healthy }
    expose: ["4001"]
    ports: ["4001:4001"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","node -e \"require('http').get('http://127.0.0.1:4001/healthz',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\""]
      interval: 5s
      timeout: 2s
      retries: 10
      start_period: 10s

  records-service:
    build: { context: ., dockerfile: services/records-service/Dockerfile }
    env_file: [.env]
    depends_on:
      postgres: { condition: service_healthy }
      kafka: { condition: service_healthy }
    expose: ["4002"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","node -e \"require('http').get('http://127.0.0.1:4002/healthz',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\""]
      interval: 5s
      timeout: 2s
      retries: 10
      start_period: 10s

  listings-service:
    build: { context: ., dockerfile: services/listings-service/Dockerfile }
    env_file: [.env]
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
    expose: ["4003"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD","wget","-qO-","http://localhost:4003/healthz"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 30s

  analytics-service:
    build: { context: ., dockerfile: services/analytics-service/Dockerfile }
    env_file: [.env]
    depends_on:
      kafka: { condition: service_healthy }
      redis: { condition: service_healthy }
    expose: ["4004"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD","wget","-qO-","http://localhost:4004/healthz"]
      interval: 10s
      timeout: 3s
      retries: 10
    environment:
      BASE_URL: http://haproxy:8081

  cron-jobs:
    build: { context: ., dockerfile: services/cron-jobs/Dockerfile }
    env_file: [.env]
    depends_on:
      postgres: { condition: service_healthy }
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","ps aux | grep -v grep | grep -q 'node dist/jobs.js'"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 20s
    environment:
      BASE_URL: http://haproxy:8081

  auction-monitor:
    build: { context: ., dockerfile: services/auction-monitor/Dockerfile }
    env_file: [.env]
    depends_on:
      kafka: { condition: service_healthy }
      listings-service: { condition: service_healthy }
      postgres: { condition: service_healthy }
    expose: ["4010"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","node -e \"require('http').get('http://127.0.0.1:4010/healthz',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\""]
      interval: 5s
      timeout: 2s
      start_period: 5s
    environment:
      BASE_URL: http://haproxy:8081

  api-gateway:
    build: { context: ., dockerfile: services/api-gateway/Dockerfile }
    env_file: [.env]
    depends_on:
      auth-service: { condition: service_healthy }
      records-service: { condition: service_healthy }
      listings-service: { condition: service_healthy }
      analytics-service: { condition: service_healthy }
      python-ai-service: { condition: service_healthy }
    expose: ["4000"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD","wget","-qO-","http://localhost:4000/healthz"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 30s

  webapp:
    build: { context: ., dockerfile: webapp/Dockerfile }
    env_file: [.env]
    expose: ["3001"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","wget -qO- http://localhost:3001/ >/dev/null"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 30s

  python-ai-service:
    build: { context: ./services/python-ai-service, dockerfile: Dockerfile }
    env_file: [.env]
    depends_on:
      redis: { condition: service_healthy }
    expose: ["5005"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","python -c \"import urllib.request,sys; sys.exit(0) if urllib.request.urlopen('http://localhost:5005/healthz', timeout=3).status==200 else sys.exit(1)\""]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 60s

  haproxy:
    image: haproxy:2.9
    volumes:
      - ./infra/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    ports:
      - "8081:8081"
      - "8404:8404"
    depends_on:
      api-gateway: { condition: service_healthy }
    healthcheck:
      test: ["CMD","haproxy","-c","-f","/usr/local/etc/haproxy/haproxy.cfg"]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 5s
    restart: unless-stopped
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  haproxy-exporter:
    image: prom/haproxy-exporter:v0.14.0
    command: ["--haproxy.scrape-uri=http://haproxy:8404/;csv"]
    depends_on:
      haproxy: { condition: service_healthy }
    expose: ["9101"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","wget -qO- http://localhost:9101/metrics >/dev/null"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s

  nginx:
    image: nginx:1.27-alpine
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_cache:/var/cache/nginx
    ports:
      - "8080:8080"
      - "8082:8082"
    depends_on:
      haproxy: { condition: service_healthy }
      webapp:  { condition: service_healthy }
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","wget -qO- http://localhost:8080/healthz >/dev/null"]
      interval: 5s
      timeout: 2s
      retries: 20
      start_period: 10s
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.11.0
    command: ["-nginx.scrape-uri=http://nginx:8080/nginx_status"]
    depends_on:
      nginx: { condition: service_started }
    expose: ["9113"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","wget -qO- http://localhost:9113/metrics >/dev/null"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s

volumes:
  pgdata:
  nginx_cache:
