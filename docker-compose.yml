services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      # This may not be taking effect in your image; rely on SRVR which is enabled by default.
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "ruok,stat,srvr,mntr"
    restart: unless-stopped
    healthcheck:
      # Probe with SRVR and look for "Mode:" in the reply
      test: ["CMD-SHELL", "bash -lc 'exec 3<>/dev/tcp/127.0.0.1/2181; echo srvr >&3; timeout 2 cat <&3 | grep -qi \"Mode:\"'"]
      interval: 5s
      timeout: 3s
      retries: 25
      start_period: 20s

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "29092:29092"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 40s

  redis:
    image: redis:7-alpine
    command: ["redis-server","--save","","--appendonly","no"]
    ports: ["6379:6379"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD","redis-cli","ping"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 5s

  postgres:
    image: postgres:16-alpine
    environment: { POSTGRES_PASSWORD: postgres }
    restart: unless-stopped
    ports: ["5432:5432"]
    volumes: ["pgdata:/var/lib/postgresql/data"]
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s

  prometheus:
    image: prom/prometheus:v2.55.0
    volumes: ["./infra/prometheus.yml:/etc/prometheus/prometheus.yml"]
    command: ["--config.file=/etc/prometheus/prometheus.yml"]
    restart: unless-stopped
    ports: ["9091:9090"]
    healthcheck:
      test: ["CMD-SHELL","wget -qO- http://localhost:9090/-/ready >/dev/null"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 15s

  grafana:
    image: grafana/grafana:11.1.0
    restart: unless-stopped
    ports: ["3000:3000"]
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL","wget -qO- http://localhost:3000/api/health | grep -q 'database: ok'"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 20s

  auth-service:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
    env_file: [.env]
    depends_on:
      postgres: { condition: service_healthy }
      kafka: { condition: service_healthy }
      redis: { condition: service_healthy }
    expose: ["4001"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD","wget","-qO-","http://localhost:4001/healthz"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 30s

  records-service:
    build:
      context: .
      dockerfile: services/records-service/Dockerfile
    env_file: [.env]
    depends_on:
      postgres: { condition: service_healthy }
      kafka: { condition: service_healthy }
    expose: ["4002"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD","wget","-qO-","http://localhost:4002/healthz"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 30s

  listings-service:
    build:
      context: .
      dockerfile: services/listings-service/Dockerfile
    env_file: [.env]
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
    expose: ["4003"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD","wget","-qO-","http://localhost:4003/healthz"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 30s

  analytics-service:
    build:
      context: .
      dockerfile: services/analytics-service/Dockerfile
    env_file: [.env]
    depends_on:
      kafka: { condition: service_healthy }
      redis: { condition: service_healthy }
    expose: ["4004"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD","wget","-qO-","http://localhost:4004/healthz"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 30s

  cron-jobs:
    build:
      context: .
      dockerfile: services/cron-jobs/Dockerfile
    env_file: [.env]
    depends_on:
      postgres: { condition: service_healthy }
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","ps aux | grep -v grep | grep -q 'node dist/jobs.js'"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 20s

  auction-monitor:
    build:
      context: .
      dockerfile: services/auction-monitor/Dockerfile
    env_file: [.env]
    depends_on:
      kafka: { condition: service_healthy }
      listings-service: { condition: service_healthy }
      postgres: { condition: service_healthy }
    expose: ["4010"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD","wget","-qO-","http://localhost:4010/healthz"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 30s

  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
    env_file: [.env]
    depends_on:
      auth-service: { condition: service_healthy }
      records-service: { condition: service_healthy }
      listings-service: { condition: service_healthy }
      analytics-service: { condition: service_healthy }
      python-ai-service: { condition: service_healthy }
    expose: ["4000"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD","wget","-qO-","http://localhost:4000/healthz"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 30s

  webapp:
    build:
      context: .
      dockerfile: webapp/Dockerfile
    env_file: [.env]
    expose: ["3001"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","wget -qO- http://localhost:3001/ >/dev/null"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 30s

  python-ai-service:
    build:
      context: ./services/python-ai-service
      dockerfile: Dockerfile
    env_file: [.env]
    depends_on:
      redis: { condition: service_healthy }
    expose: ["5005"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD","wget","-qO-","http://localhost:5005/healthz"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 15s

  haproxy:
    image: haproxy:2.9
    volumes: ["./infra/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro"]
    ports: ["8081:8081"]
    depends_on:
      api-gateway: { condition: service_started }
    restart: unless-stopped

  nginx:
    image: nginx:1.27-alpine
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_cache:/var/cache/nginx
    ports: ["8080:8080"]
    depends_on:
      api-gateway: { condition: service_started }
      webapp: { condition: service_started }
    # wait for gateway DNS to exist to avoid "host not found in upstream"
    command: ["/bin/sh","-lc","until getent hosts api-gateway; do echo 'waiting for api-gateway'; sleep 1; done; nginx -g 'daemon off;'"]
    restart: unless-stopped


volumes:
  pgdata:
  nginx_cache:
