events {}

http {
  # Docker DNS resolver for dynamic upstreams
  resolver 127.0.0.11 valid=10s ipv6=off;

  # Basic gzip
  gzip on;
  gzip_types text/plain text/css application/json application/javascript application/xml;
  gzip_min_length 256;

  # Cache for safe, read-only requests
  proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=STATIC:100m inactive=10m use_temp_path=off;
  proxy_cache_key "$scheme$request_method$host$request_uri";

  # Only cache GET/HEAD
  map $request_method $is_cacheable {
    default 0;
    GET     1;
    HEAD    1;
  }

  server {
    listen 8080;

    # ---------- API (strip /api) ----------

    # Health (never cache) â€” resolves every request via variable
    location = /api/healthz {
      set $gateway http://api-gateway:4000;
      proxy_http_version 1.1;
      proxy_set_header Host              $host;
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Authorization     $http_authorization;
      proxy_pass $gateway/healthz;
      proxy_cache off;
    }

    # All API routes -> gateway; explicitly strip /api
    location /api/ {
      set $gateway http://api-gateway:4000;
      proxy_http_version 1.1;
      proxy_set_header Host              $host;
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Authorization     $http_authorization;
      proxy_set_header X-Original-URI    $request_uri;

      rewrite ^/api(?<rest>/.*)$ $rest break;
      set $upstream_uri $uri$is_args$args;

      proxy_connect_timeout 5s;
      proxy_send_timeout    30s;
      proxy_read_timeout    30s;

      proxy_pass $gateway$upstream_uri;

      proxy_cache         STATIC;
      proxy_cache_methods GET HEAD;
      proxy_no_cache      $http_authorization;
      proxy_cache_bypass  $http_authorization;
      proxy_cache_valid   200 1m;
      add_header X-Cache-Status $upstream_cache_status always;
    }

    # ---------- Optional legacy direct routes ----------
    location /listings/ {
      set $gateway http://api-gateway:4000;
      proxy_http_version 1.1;
      proxy_set_header Host              $host;
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Authorization     $http_authorization;
      proxy_pass $gateway/listings/;

      proxy_cache         STATIC;
      proxy_cache_methods GET HEAD;
      proxy_no_cache      $http_authorization;
      proxy_cache_bypass  $http_authorization;
      proxy_cache_valid   200 1m;
      add_header X-Cache-Status $upstream_cache_status always;
    }

    location /ai/ {
      set $gateway http://api-gateway:4000;
      proxy_http_version 1.1;
      proxy_set_header Host              $host;
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Authorization     $http_authorization;
      proxy_pass $gateway/ai/;

      proxy_cache         STATIC;
      proxy_cache_methods GET HEAD;
      proxy_no_cache      $http_authorization;
      proxy_cache_bypass  $http_authorization;
      proxy_cache_valid   200 2m;
      add_header X-Cache-Status $upstream_cache_status always;
    }

    # ---------- Webapp at root ----------
    location / {
      set $web http://webapp:3001;
      proxy_http_version 1.1;
      proxy_set_header Host              $host;
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      proxy_connect_timeout 5s;
      proxy_send_timeout    30s;
      proxy_read_timeout    30s;

      proxy_pass $web;
    }
  }
}
